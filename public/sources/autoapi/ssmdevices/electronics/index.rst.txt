:py:mod:`ssmdevices.electronics`
================================

.. py:module:: ssmdevices.electronics


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   gps/index.rst
   mobile/index.rst
   usb/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.electronics.SwiftNavPiksi
   ssmdevices.electronics.AcronameUSBHub2x4




.. py:class:: SwiftNavPiksi(resource=Undefined, **values)

   Bases: :py:obj:`labbench.SerialLoggingDevice`

   Manage connection, acquisition, and data retreival on a single GPS device.
   The goal is to make GPS devices controllable somewhat like instruments:
   maintaining their own threads, and blocking during setup or stop
   command execution.

   Listener objects must implement an attach method with one argument
   consisting of the queue that the device manager uses to push data
   from the serial port.

   .. py:attribute:: baud_rate

      


.. py:class:: AcronameUSBHub2x4(resource=Undefined, **values)

   Bases: :py:obj:`labbench.Device`

   This class wraps brainstem drivers to simplify control over USB hubs
   via the brainstem package.

   The only functionality exposed by method of this class is the ability
   to dynamically enable and disable USB 3.0 ports.

   :param resource: Serial number string specifying the device to connect to.
   If None (default), the brainstem driver will try to automatically choose
   a connected device.


   .. py:attribute:: model
      :value: 17

      

   .. py:attribute:: data0_enabled

      

   .. py:attribute:: data1_enabled

      

   .. py:attribute:: data2_enabled

      

   .. py:attribute:: data3_enabled

      

   .. py:attribute:: power0_enabled

      

   .. py:attribute:: power1_enabled

      

   .. py:attribute:: power2_enabled

      

   .. py:attribute:: power3_enabled

      

   .. py:method:: open()

      Backend implementations overload this to open a backend
      connection to the resource.


   .. py:method:: close()

      Release control over the device.


   .. py:method:: set_key(key, value, name=None)

      Apply an instrument setting to the instrument. The value ``value''
      will be applied to the trait attriute ``attr'' in type(self).


   .. py:method:: enable(data=True, power=True, channel='all')

      Enable or disable of USB port features at one or all hub ports.

      :param data:  Enables data on the port (if evaluates to true)

      :param power: Enables power on the port (if evaluates to true)

      :param channel: An integer port number specifies the port to act on,
       otherwise 'all' (the default) applies the port settings to all
       ports on the hub.



