:py:mod:`ssmdevices.electronics.mobile`
=======================================

.. py:module:: ssmdevices.electronics.mobile

.. autoapi-nested-parse::

   Made by Michael Voecks



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.electronics.mobile.AndroidDebugBridge




Attributes
~~~~~~~~~~

.. autoapisummary::

   ssmdevices.electronics.mobile.devices


.. py:class:: AndroidDebugBridge(resource=Undefined, **values)

   Bases: :py:obj:`labbench.ShellBackend`

   Virtual device controlled by a shell command in another process.

   Data can be captured from standard output, and standard error pipes, and
   optionally run as a background thread.

   After opening, `backend` is `None`. On a call to execute(), `backend`
   becomes is a subprocess instance. When EOF is reached on the executable's
   stdout, the backend resets to None.

   When `run` is called, the program runs in a subprocess.
   The output piped to the command line standard output is queued in a
   background thread. Call read_stdout() to retreive (and clear) this
   queued stdout.

   .. py:method:: devices()

      This function checks ADB to see if any devices are connected, if
      none are, it raises an exception, if there is at least one device
      connected:
      This function returns a list of tuples, each tuple contains the
      device id and device type. i.e. [['f0593056', 'device']] represents
      one connected device with id f0593056.


   .. py:method:: is_device_connected(serialNum)

      Uses the devices function to check if a device (sepecified by the
      serialNum argument) is connected to the ADB server, return true/false


   .. py:method:: reboot(deviceId)

      This function takes in a UE's Id, (from self.devices), and reboots
      the specified device.


   .. py:method:: check_airplane_mode(deviceId)

      Returns the status of airplane mode of device deviceId,
      returns 0 if deviceId's airplane_mode is OFF
      returns 1 if deviceId's airplane_mode is ON
      raises exception if it cannot find the device


   .. py:method:: set_airplane_mode(deviceId, status)

      Sets the airplane_mode feature on the device specified by deviceId
      to the value of the 'status' argumentself.
      status should be set to either 0 or 1, 0 indicating that the airplane_mode
      should be turned off, 1 indicating it should be turned on


   .. py:method:: push_file(deviceId, local_filepath, device_filepath)

      Takes a file at the location specified by local_filepath and copys
      it into the directory specified by device_filepath on the device that
      is specified by deviceId.



.. py:data:: devices

   

