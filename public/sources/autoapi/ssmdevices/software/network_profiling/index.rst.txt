:py:mod:`ssmdevices.software.network_profiling`
===============================================

.. py:module:: ssmdevices.software.network_profiling

.. autoapi-nested-parse::

   @authors: Dan Kuester <daniel.kuester@nist.gov>,
            Michael Voecks <michael.voecks@nist.gov>



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.software.network_profiling.IPerf3
   ssmdevices.software.network_profiling.IPerf2
   ssmdevices.software.network_profiling.IPerf2OnAndroid
   ssmdevices.software.network_profiling.IPerf2BoundPair
   ssmdevices.software.network_profiling.TrafficProfiler_ClosedLoopTCP




.. py:class:: IPerf3(resource=Undefined, **values)

   Bases: :py:obj:`_IPerfBase`

   Run an instance of iperf3, collecting output data in a background thread.
   When running as an iperf client (server=False),
   The default value is the path that installs with 64-bit cygwin.

   .. py:attribute:: FLAGS

      

   .. py:attribute:: reverse

      

   .. py:attribute:: json

      

   .. py:attribute:: zerocopy

      


.. py:class:: IPerf2(resource=Undefined, **values)

   Bases: :py:obj:`_IPerfBase`

   Run an instance of iperf, collecting output data in a background thread.
   When running as an iperf client (server=False),
   The default value is the path that installs with 64-bit cygwin.

   .. py:attribute:: FLAGS

      

   .. py:attribute:: DATAFRAME_COLUMNS
      :value: ('jitter_milliseconds', 'datagrams_lost', 'datagrams_sent', 'datagrams_loss_percentage',...

      

   .. py:attribute:: bidirectional

      

   .. py:attribute:: report_style

      

   .. py:method:: profile(block=True)


   .. py:method:: read_stdout()

      retreive text from standard output, and parse into a pandas DataFrame if self.report_style is None


   .. py:method:: _format_output(stdout)

      pack stdout into a pandas DataFrame if self.report_style == 'C'



.. py:class:: IPerf2OnAndroid(resource=Undefined, **values)

   Bases: :py:obj:`IPerf2`

   Run an instance of iperf, collecting output data in a background thread.
   When running as an iperf client (server=False),
   The default value is the path that installs with 64-bit cygwin.

   .. py:attribute:: remote_binary_path

      

   .. py:method:: profile(block=True)


   .. py:method:: open()

      Open an adb connection to the handset, copy the iperf binary onto the phone, and
      verify that iperf executes.


   .. py:method:: kill(wait_time=3)

      Kill the local process and the iperf process on the UE.


   .. py:method:: read_stdout()

      adb seems to forward stderr as stdout. Filter out some undesired
      resulting status messages.


   .. py:method:: wait_for_cell_data(timeout=60)

      Block until cellular data is available

      :param timeout: how long to wait for a connection before raising a Timeout error
      :return: None


   .. py:method:: reboot(block=True)

      Reboot the device.

      :param block: if truey, block until the device is ready to accept commands.


   .. py:method:: wait_for_device(timeout=30)

      Block until the device is ready to accept commands

      :return: None



.. py:class:: IPerf2BoundPair(resource=Undefined, **values)

   Bases: :py:obj:`IPerf2`

   Run an iperf client and a server on the host computer at the same time. They are
   bound to interfaces in order to ensure that data is routed between them, not through
   localhost or any other interface.

   .. py:attribute:: resource

      

   .. py:attribute:: server

      

   .. py:attribute:: client

      

   .. py:attribute:: children

      

   .. py:method:: open()

      The :meth:`open` method implements opening in the
      :class:`Device` object protocol. Call the
      :meth:`execute` method when open to
      execute the binary.


   .. py:method:: close()

      Backend implementations must overload this to disconnect an
      existing connection to the resource encapsulated in the object.


   .. py:method:: kill()

      If a process is running in the background, kill it. Sends a console
      warning if no process is running.


   .. py:method:: running()

      Check whether a background process is running.

      :returns: True if running, otherwise False


   .. py:method:: start()


   .. py:method:: read_stdout()

      retreive text from standard output, and parse into a pandas DataFrame if self.report_style is None


   .. py:method:: _merge_dataframes(client, server)


   .. py:method:: _setup_pair()



.. py:class:: TrafficProfiler_ClosedLoopTCP(resource=Undefined, **values)

   Bases: :py:obj:`TrafficProfiler_ClosedLoop`

   Profile closed-loop traffic between two network interfaces
   on this computer. Takes advantage of the system clock as a common
   basis for traffic delay measurement, with uncertainty approximately
   equal to the system time resolution.

   .. py:property:: _receive_interface


   .. py:attribute:: _server

      

   .. py:attribute:: PORT_WINERRS
      :value: (10013, 10048)

      

   .. py:attribute:: CONN_WINERRS
      :value: (10051,)

      

   .. py:method:: _close_sockets(*sockets, bytes_=0)


   .. py:method:: _open_sockets(buffer_size)

      Connect the supplied client socket to the server.


   .. py:method:: _run(client_sock, server_sock, buffer_size, duration=None, count=None, end_event=None)


   .. py:method:: profile_count(buffer_size: int, count: int)

      sends `count` buffers of size `buffer_size` bytes
      and returns profiling information"

      :param buffer_size: number of bytes to send in each buffer
      :type buffer_size: int
      :param count: the number of buffers to send
      :type count: int

      :returns: a DataFrame indexed on PC time containing columns 'bits_per_second', 'duration', 'delay', 'queuing_duration'


   .. py:method:: profile_duration(buffer_size: int, duration: float)

      sends buffers of size `buffer_size` bytes until
      `duration` seconds have elapsed, and returns profiling information"

      :param buffer_size: number of bytes to send in each buffer
      :type buffer_size: int
      :param duration: the minimum number of seconds to spend profiling
      :type duration: float

      :returns: a DataFrame indexed on PC time containing columns 'bits_per_second', 'duration', 'delay', 'queuing_duration'


   .. py:method:: _make_dataframe(worker_data)


   .. py:method:: mss()


   .. py:method:: mtu()


   .. py:method:: wait_for_interfaces(timeout)



