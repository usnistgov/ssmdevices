:py:mod:`ssmdevices.instruments.oscilloscopes`
==============================================

.. py:module:: ssmdevices.instruments.oscilloscopes


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.instruments.oscilloscopes.RigolOscilloscope




.. py:class:: RigolOscilloscope(resource=Undefined, **values)

   Bases: :py:obj:`labbench.VISADevice`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource

   .. py:attribute:: time_offset

      

   .. py:attribute:: time_scale

      

   .. py:method:: open(horizontal=False)

      opens the instrument.

      When managing device connection through a `with` context,
      this is called automatically and does not need
      to be invoked.


   .. py:method:: fetch()


   .. py:method:: fetch_rms()



