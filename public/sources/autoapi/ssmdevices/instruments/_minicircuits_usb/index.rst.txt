:py:mod:`ssmdevices.instruments._minicircuits_usb`
==================================================

.. py:module:: ssmdevices.instruments._minicircuits_usb


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.instruments._minicircuits_usb.MiniCircuitsUSBDevice
   ssmdevices.instruments._minicircuits_usb.SwitchAttenuatorBase




.. py:class:: MiniCircuitsUSBDevice(resource=Undefined, **values)

   Bases: :py:obj:`labbench.Device`

   General control over MiniCircuits USB devices

   .. py:attribute:: _VID
      :value: 8398

      

   .. py:attribute:: resource

      

   .. py:attribute:: usb_path

      

   .. py:attribute:: timeout

      

   .. py:method:: open()

      Backend implementations overload this to open a backend
      connection to the resource.


   .. py:method:: close()

      Backend implementations must overload this to disconnect an
      existing connection to the resource encapsulated in the object.


   .. py:method:: _parse_str(data)
      :classmethod:

      Convert a command response to a string.


   .. py:method:: _cmd(*cmd)

      Send up to 64 1-byte unsigned integers and return the response.


   .. py:method:: _test_instance(usb_path)
      :classmethod:
      :abstractmethod:

      must return a trial object to test connections when enumerating devices.
      the subclass must have serial_number and model traits.


   .. py:method:: _find_path(serial)
      :classmethod:

      Find a USB HID device path matching the MiniCircuits device with
      the specified serial number. If serial is None, then check that
      exactly one MiniCircuits device is connected, and return its path.
      Raise an exception if no devices are connected.



.. py:class:: SwitchAttenuatorBase(resource=Undefined, **values)

   Bases: :py:obj:`MiniCircuitsUSBDevice`

   General control over MiniCircuits USB devices

   .. py:attribute:: CMD_GET_PART_NUMBER
      :value: 40

      

   .. py:attribute:: CMD_GET_SERIAL_NUMBER
      :value: 41

      

   .. py:method:: _test_instance(usb_path)
      :classmethod:

      must return a trial object to test connections when enumerating devices.
      the subclass must have serial_number and model traits.


   .. py:method:: model()


   .. py:method:: serial_number()



