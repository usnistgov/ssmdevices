:py:mod:`ssmdevices.instruments.networking`
===========================================

.. py:module:: ssmdevices.instruments.networking

.. autoapi-nested-parse::

   Network test instruments

   Authors:
       Aziz Kord
       Dan Kuester



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.instruments.networking.AeroflexTM500




.. py:class:: AeroflexTM500(resource=Undefined, **values)

   Bases: :py:obj:`labbench.TelnetDevice`

   Control an Aeroflex TM500 network tester with a
   telnet connection.

   The approach here is to iterate through lines of bytes, and
   add delays as needed for special cases as defined in the
   `delays` attribute.

   At some point, these lines should just be loaded directly
   from a file that could be treated as a config file.

   .. py:attribute:: timeout

      

   .. py:attribute:: ack_timeout

      

   .. py:attribute:: busy_retries

      

   .. py:attribute:: remote_ip

      

   .. py:attribute:: remote_ports

      

   .. py:attribute:: min_acquisition_time

      

   .. py:attribute:: port

      

   .. py:attribute:: config_root

      

   .. py:attribute:: data_root

      

   .. py:attribute:: convert_files

      

   .. py:method:: arm(scenario_name)

      Load the scenario from the command listing in a local TM500
      configuration file.
      The the full path to the configuration file is
      `os.path.join(self.config_root, self.config_file)+'.conf'`
      (on the host computer running this python instance).

      If the last script that was run is the same as the selected config
      script, then the script is loaded and sent to the TM500 only
      if force=True. It always runs on the first call after AeroflexTM500
      is instantiated.

      :returns: A list of responses to each command sent


   .. py:method:: trigger()

      Start logging and return the path to the directory where the data
      is being saved.


   .. py:method:: stop(convert=True)

      Stop logging.
      :param bool convert: Whether to convert the output binary files to text

      :returns: If convert=True, a dictionary of {'name': path} items pointing to the converted text output


   .. py:method:: reboot(timeout=180)

      Reboot the TMA and TM500 hardware.


   .. py:method:: command_log_to_script(path)
      :staticmethod:

      Scrape a script out of a TM500 "screen save" text file. The output
      for an input that takes the form <path>/<to>/<filename>.txt
      will be <path>/<to>/<filename>-script.txt.


   .. py:method:: close()

      Disconnect the telnet connection


   .. py:method:: open()

      Open a telnet connection to the host defined
      by the string in self.resource


   .. py:method:: _tma_is_connected()


   .. py:method:: _reconnect(force=False)

      Ensure the TMA software is connected to the TM500


   .. py:method:: _block_until_min_acquisition()

      Make sure the minimum acquisition time has elapsed to avoid putting
      the TM500 in a sad state


   .. py:method:: _send(msg, data_lines=1, confirm=True, timeout=None)

      Send a message, then block until a confirmation message is received.

      :param msg: str or bytes containing the message to send
      :param int data_lines: number of lines in the response string

      :returns: decoded string containing the response


   .. py:method:: _convert_to_text()

      Convert the latest data to text


   .. py:method:: _read_until(rsp, timeout=None)



