:py:mod:`ssmdevices.instruments.gps_simulator`
==============================================

.. py:module:: ssmdevices.instruments.gps_simulator

.. autoapi-nested-parse::

   GPS simulator control classes

   :author: Duncan McGillivray <duncan.mcgillivray@nist.gov>, Daniel Kuester <daniel.kuester@nist.gov>



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.instruments.gps_simulator.SpirentGSS8000




.. py:class:: SpirentGSS8000(resource=Undefined, **values)

   Bases: :py:obj:`labbench.SerialDevice`

   Control a Spirent GPS GSS8000 simulator over a serial connection.

   Responses from the Spirent seem to be incompatible with
   pyvisa, so this driver uses plain serial.

   .. py:attribute:: resource

      

   .. py:method:: get_key(key, trait_name=None)

      implement this in subclasses to use `key` to retreive a parameter value from the
      Device with self.backend.

      property traits defined with "key=" call this to retrieve values
      from the backend.


   .. py:method:: load_scenario(path)

      Load a GPS scenario from a file stored on the instrument.

      :param path: Full path to scenario file on the instrument.



   .. py:method:: save_scenario(folderpath)

      Save the current GPS scenario to a file stored on the instrument.

      :param path: Full path to scenario file on the instrument.



   .. py:method:: fix_path_name(path)
      :staticmethod:


   .. py:method:: write(key, returns=None)

      Send a message to the spirent, and check the status message
      returned by the spirent.

      :return: Either 'value' (return the data response), 'status'
               (return the instrument status), or None (raise an
               exception if a data value is returned)


   .. py:method:: query(command)


   .. py:method:: run()

      Start running the current scenario. Requires that there is time left in
      the scenario, otherwise run `rewind()` first.


   .. py:method:: end()

      Stop running the current scenario. If a scenario is not
      running, an exception is raised.


   .. py:method:: rewind()

      Rewind the current scenario to the beginning.


   .. py:method:: abort()

      Force stop the current scenario.


   .. py:method:: reset()

      End any currently running scenario, then rewind


   .. py:method:: utc_time()

      UTC time of the running scenario


   .. py:method:: running()

      `True` if a scenario is running.


   .. py:method:: status()

      UTC time of the current running scenario.



