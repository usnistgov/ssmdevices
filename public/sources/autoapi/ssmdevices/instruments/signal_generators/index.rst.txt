:py:mod:`ssmdevices.instruments.signal_generators`
==================================================

.. py:module:: ssmdevices.instruments.signal_generators

.. autoapi-nested-parse::

   Driver classes for signal generators.
   :author: Ryan Jacobs <ryan.jacobs@nist.gov>, Aziz Kord <aziz.kord@nist.gov>, Daniel Kuester <daniel.kuester@nist.gov>
   Paul.Blanchard <paul.blanchard@nist.gov>



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.instruments.signal_generators.RohdeSchwarzSMW200A




.. py:class:: RohdeSchwarzSMW200A(resource=Undefined, **values)

   Bases: :py:obj:`labbench.VISADevice`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource

   .. py:attribute:: frequency_center

      

   .. py:attribute:: rf_output_power

      

   .. py:attribute:: rf_output_enable

      

   .. py:method:: save_state(FileName, num='4')

      Save current state of the device to the default directory.
      :param FileName: state file location on the instrument
      :type FileName: string

      :param num: state number in the saved filename
      :type num: int



   .. py:method:: load_state(FileName, opc=False, num='4')

      Loads a previously saved state file in the instrument

      :param FileName: state file location on the instrument
      :type FileName: string

      :param opc: set the VISA op complete flag?
      :type opc: bool

      :param num: state number in the saved filename
      :type num: int



