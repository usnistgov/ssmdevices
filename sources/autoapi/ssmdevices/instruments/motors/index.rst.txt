:py:mod:`ssmdevices.instruments.motors`
=======================================

.. py:module:: ssmdevices.instruments.motors

.. autoapi-nested-parse::

   Created on Wed Feb  7 10:05:35 2018

   @author: aec

   This is where we drive things that move:
       for now this is just the ETS-Lindgren model 2005 Azimuth Positioner



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.instruments.motors.ETSLindgrenAzi2005




.. py:class:: ETSLindgrenAzi2005(resource=Undefined, **values)

   Bases: :py:obj:`labbench.VISADevice`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource

   .. py:attribute:: timeout

      

   .. py:attribute:: baud_rate

      

   .. py:attribute:: parity

      

   .. py:attribute:: stopbits

      

   .. py:attribute:: xonxoff

      

   .. py:attribute:: rtscts

      

   .. py:attribute:: dsrdtr

      

   .. py:attribute:: read_termination

      

   .. py:attribute:: write_termination

      

   .. py:attribute:: speed

      

   .. py:attribute:: cwlimit

      

   .. py:attribute:: cclimit

      

   .. py:attribute:: define_position

      

   .. py:attribute:: position

      

   .. py:method:: config(mode)


   .. py:method:: whereami()


   .. py:method:: wheredoigo()


   .. py:method:: set_speed(value)


   .. py:method:: set_limits(side, value)

      Probably should put some error checking in here to make sure value is a float
      Also, note we use write here becuase property.setter inserts a space


   .. py:method:: set_position(value)


   .. py:method:: seek(value)


   .. py:method:: stop()


   .. py:method:: set_key(key, value, trait_name=None)

      writes an SCPI message to set a parameter with a name key
      to `value`.

      The command message string is formatted as f'{scpi_key} {value}'. This
      This is automatically called on assignment to property traits that
      are defined with 'key='.

      :param scpi_key: the name of the parameter to set
      :type scpi_key: str
      :param value: value to assign
      :type value: str
      :param name: name of the trait setting the key (or None to indicate no trait) (ignored)
      :type name: str, None



