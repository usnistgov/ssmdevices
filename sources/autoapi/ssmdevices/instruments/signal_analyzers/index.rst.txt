:py:mod:`ssmdevices.instruments.signal_analyzers`
=================================================

.. py:module:: ssmdevices.instruments.signal_analyzers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26Base
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26SpectrumAnalyzer
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26LTEAnalyzer
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26IQAnalyzer
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26RealTime
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW43Base
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW43SpectrumAnalyzer
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW43LTEAnalyzer
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW43IQAnalyzer
   ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW43RealTime




.. py:class:: RohdeSchwarzFSW26Base(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSWBase`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource

   .. py:attribute:: frequency_center

      

   .. py:attribute:: frequency_span

      

   .. py:attribute:: frequency_start

      

   .. py:attribute:: frequency_stop

      

   .. py:attribute:: resolution_bandwidth

      


.. py:class:: RohdeSchwarzFSW26SpectrumAnalyzer(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW26Base`, :py:obj:`RohdeSchwarzSpectrumAnalyzerMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


.. py:class:: RohdeSchwarzFSW26LTEAnalyzer(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW26Base`, :py:obj:`RohdeSchwarzLTEAnalyzerMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


.. py:class:: RohdeSchwarzFSW26IQAnalyzer(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW26Base`, :py:obj:`RohdeSchwarzIQAnalyzerMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


.. py:class:: RohdeSchwarzFSW26RealTime(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW26Base`, :py:obj:`RohdeSchwarzRealTimeMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


.. py:class:: RohdeSchwarzFSW43Base(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSWBase`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource

   .. py:attribute:: frequency_center

      

   .. py:attribute:: frequency_span

      

   .. py:attribute:: frequency_start

      

   .. py:attribute:: frequency_stop

      

   .. py:attribute:: resolution_bandwidth

      


.. py:class:: RohdeSchwarzFSW43SpectrumAnalyzer(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW43Base`, :py:obj:`RohdeSchwarzSpectrumAnalyzerMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


.. py:class:: RohdeSchwarzFSW43LTEAnalyzer(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW43Base`, :py:obj:`RohdeSchwarzLTEAnalyzerMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


.. py:class:: RohdeSchwarzFSW43IQAnalyzer(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW43Base`, :py:obj:`RohdeSchwarzIQAnalyzerMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


.. py:class:: RohdeSchwarzFSW43RealTime(resource=Undefined, **values)

   Bases: :py:obj:`RohdeSchwarzFSW43Base`, :py:obj:`RohdeSchwarzRealTimeMixIn`

   base class for VISA device wrappers with pyvisa.

   .. rubric:: Examples

   Autodetect a list of valid `resource` strings on the host::

       print(VISADevice.list_resources())

   Fetch the instrument identity string::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.identity)

   Write ':FETCH?' to the instrument, read an expected ASCII CSV response,
   and return it as a pandas DataFrame::

       with VISADevice('USB0::0x2A8D::0x1E01::SG56360004::INSTR') as instr:
           print(inst.query_ascii_values(':FETCH?'))

   See also:
   .. _installing a proprietary OS service for VISA:
       https://pyvisa.readthedocs.io/en/latest/faq/getting_nivisa.html#faq-getting-nivisa
   .. _resource strings and basic configuration:
       https://pyvisa.readthedocs.io/en/latest/introduction/communication.html#getting-the-instrument-configuration-right

   .. attribute:: backend

      instance of a pyvisa instrument object (when open)

      :type: pyvisa.Resource


