from ssmdevices.instruments import *
import ssmdevices
import builtins

class MiniCircuitsRCDAT(ssmdevices.instruments.minicircuits.SingleChannelAttenuator):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    @Unicode(settable=False,cache=True)
    def model(self) -> None: ...
    def model(func) -> None: ...
    @Unicode(settable=False,cache=True)
    def serial_number(self) -> None: ...
    def serial_number(func) -> None: ...
    @Float(help='attenuation level (dB), automatically calibrated if settings.frequency is not None',min=0,max=115)
    def attenuation(self) -> None: ...
    def attenuation(self, value) -> None: ...
    def attenuation(func) -> None: ...
    @Float(help='attenuation setting sent to the attenuator (dB), which is different from the calibrated attenuation value an attenuation has been applied',min=0,max=115,step=0.25)
    def attenuation_setting(self) -> None: ...
    def attenuation_setting(self, value) -> None: ...
    def attenuation_setting(func) -> None: ...
    @Float(help='attenuation setting sent to the attenuator (dB), which is different from the calibrated attenuation value an attenuation has been applied',min=0,max=115,step=0.25)
    def __(self) -> None: ...
    def __(self, value) -> None: ...
    def __(func) -> None: ...
    @Float(help='output power, in dB units the same as output_power_offset (settings.output_power_offset - state.attenuation)')
    def output_power(self) -> None: ...
    def output_power(self, output_power) -> None: ...
    def output_power(func) -> None: ...
    def __init__(self, resource: str = None, *, concurrency: bool = True, path: bytes = None, timeout: int = 1, frequency: float = None, output_power_offset: float = None) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class MiniCircuitsRC4DAT(labbench.backends.DotNetDevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def open(self) -> None: ...
    def _validate_connection(self) -> None: ...
    def close(self) -> None: ...
    @Unicode(settable=False,cache=True)
    def model(self) -> None: ...
    def model(func) -> None: ...
    @Unicode(settable=False,cache=True)
    def serial_number(self) -> None: ...
    def serial_number(func) -> None: ...
    def attenuation1(func) -> None: ...
    def attenuation2(func) -> None: ...
    def attenuation3(func) -> None: ...
    def attenuation4(func) -> None: ...
    def __get_by_key__(self, command) -> None: ...
    def _MiniCircuitsRC4DAT__set_state_(self, command, value) -> None: ...
    def __init__(self, resource: str = None, *, concurrency: bool = True) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class SpirentGSS8000(labbench.backends.SerialDevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def __get_by_key__(self, trait) -> None: ...
    def load_scenario(self, path) -> None: ...
    def save_scenario(self, folderpath) -> None: ...
    def write(self, command, returns=None) -> None: ...
    def query(self, command) -> None: ...
    def run(self) -> None: ...
    def end(self) -> None: ...
    def rewind(self) -> None: ...
    def abort(self) -> None: ...
    def reset(self) -> None: ...
    @Bytes(help=' UTC time of the running scenario ',settable=False)
    def utc_time(self) -> None: ...
    def utc_time(func) -> None: ...
    @Bool(help=' `True` if a scenario is running. ',settable=False)
    def running(self) -> None: ...
    def running(func) -> None: ...
    @Bytes(help=' UTC time of the current running scenario.',settable=False,only=(b'no scenario', b'loading', b'ready', b'arming', b'armed', b'running', b'paused', b'ended'),case=False)
    def status(self) -> None: ...
    def status(func) -> None: ...
    def __init__(self, resource: str = 'COM17', *, concurrency: bool = True, timeout: float = 2, write_termination: bytes = b'\n', baud_rate: int = 9600, parity: bytes = b'N', stopbits: float = 1, xonxoff: bool = False, rtscts: bool = False, dsrdtr: bool = False) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class AeroflexTM500(labbench.backends.TelnetDevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def arm(self, scenario_name) -> None: ...
    def trigger(self) -> None: ...
    def stop(self, convert=True) -> None: ...
    def reboot(self, timeout=180) -> None: ...
    def close(self) -> None: ...
    def open(self) -> None: ...
    def _tma_is_connected(self) -> None: ...
    def _reconnect(self, force=False) -> None: ...
    def _block_until_min_acquisition(self) -> None: ...
    def _send(self, msg, data_lines=1, confirm=True, timeout=None) -> None: ...
    def _convert_to_text(self) -> None: ...
    def _read_until(self, rsp, timeout=None) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, timeout: float = 1, port: int = 5003, ack_timeout: float = 30, busy_retries: int = 20, remote_ip: str = '10.133.0.203', remote_ports: str = '5001 5002 5003', min_acquisition_time: int = 30, config_root: str = '.', data_root: str = '.', convert_files: list = []) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzZMBSeries(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    def clear(self) -> None: ...
    def save_trace_to_csv(self, path, trace=1) -> None: ...
    def trigger(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RigolOscilloscope(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def time_offset(func) -> None: ...
    def time_scale(func) -> None: ...
    def open(self, horizontal=False) -> None: ...
    def fetch(self) -> None: ...
    def fetch_rms(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class KeysightU2000XSeries(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    def output_trigger(func) -> None: ...
    def trigger_source(func) -> None: ...
    def trigger_count(func) -> None: ...
    def measurement_rate(func) -> None: ...
    def sweep_aperture(func) -> None: ...
    def frequency(func) -> None: ...
    def preset(self) -> None: ...
    def fetch(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzNRP8s(ssmdevices.instruments.power_sensors.RohdeSchwarzNRPSeries):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    @Unicode(key='SENS:FUNC',only=('POW:AVG', 'POW:BURS:AVG', 'POW:TSL:AVG', 'XTIM:POW', 'XTIM:POWer'),case=False)
    def function(self, value) -> None: ...
    def function(func) -> None: ...
    @Unicode(key='TRIG:SOUR',help="'HOLD: No trigger; IMM: Software; INT: Internal level trigger; EXT2: External trigger, 10 kOhm",only=('HOLD', 'IMM', 'INT', 'EXT', 'EXT1', 'EXT2', 'BUS', 'INT1'),case=False)
    def trigger_source(self) -> None: ...
    def trigger_source(func) -> None: ...
    def trigger_delay(func) -> None: ...
    def trigger_count(func) -> None: ...
    def trigger_holdoff(func) -> None: ...
    def trigger_level(func) -> None: ...
    def trace_points(func) -> None: ...
    def trace_realtime(func) -> None: ...
    def trace_time(func) -> None: ...
    def trace_offset_time(func) -> None: ...
    def trace_average_count(func) -> None: ...
    def trace_average_mode(func) -> None: ...
    def trace_average_enable(func) -> None: ...
    def average_count(func) -> None: ...
    def average_auto(func) -> None: ...
    def average_enable(func) -> None: ...
    def smoothing_enable(func) -> None: ...
    def read_termination(func) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzNRP18s(ssmdevices.instruments.power_sensors.RohdeSchwarzNRPSeries):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    @Unicode(key='SENS:FUNC',only=('POW:AVG', 'POW:BURS:AVG', 'POW:TSL:AVG', 'XTIM:POW', 'XTIM:POWer'),case=False)
    def function(self, value) -> None: ...
    def function(func) -> None: ...
    @Unicode(key='TRIG:SOUR',help="'HOLD: No trigger; IMM: Software; INT: Internal level trigger; EXT2: External trigger, 10 kOhm",only=('HOLD', 'IMM', 'INT', 'EXT', 'EXT1', 'EXT2', 'BUS', 'INT1'),case=False)
    def trigger_source(self) -> None: ...
    def trigger_source(func) -> None: ...
    def trigger_delay(func) -> None: ...
    def trigger_count(func) -> None: ...
    def trigger_holdoff(func) -> None: ...
    def trigger_level(func) -> None: ...
    def trace_points(func) -> None: ...
    def trace_realtime(func) -> None: ...
    def trace_time(func) -> None: ...
    def trace_offset_time(func) -> None: ...
    def trace_average_count(func) -> None: ...
    def trace_average_mode(func) -> None: ...
    def trace_average_enable(func) -> None: ...
    def average_count(func) -> None: ...
    def average_auto(func) -> None: ...
    def average_enable(func) -> None: ...
    def smoothing_enable(func) -> None: ...
    def read_termination(func) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzNRPSeries(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    @Unicode(key='SENS:FUNC',only=('POW:AVG', 'POW:BURS:AVG', 'POW:TSL:AVG', 'XTIM:POW', 'XTIM:POWer'),case=False)
    def function(self, value) -> None: ...
    def function(func) -> None: ...
    @Unicode(key='TRIG:SOUR',help="'HOLD: No trigger; IMM: Software; INT: Internal level trigger; EXT2: External trigger, 10 kOhm",only=('HOLD', 'IMM', 'INT', 'EXT', 'EXT1', 'EXT2', 'BUS', 'INT1'),case=False)
    def trigger_source(self) -> None: ...
    def trigger_source(func) -> None: ...
    def trigger_delay(func) -> None: ...
    def trigger_count(func) -> None: ...
    def trigger_holdoff(func) -> None: ...
    def trigger_level(func) -> None: ...
    def trace_points(func) -> None: ...
    def trace_realtime(func) -> None: ...
    def trace_time(func) -> None: ...
    def trace_offset_time(func) -> None: ...
    def trace_average_count(func) -> None: ...
    def trace_average_mode(func) -> None: ...
    def trace_average_enable(func) -> None: ...
    def average_count(func) -> None: ...
    def average_auto(func) -> None: ...
    def average_enable(func) -> None: ...
    def smoothing_enable(func) -> None: ...
    def read_termination(func) -> None: ...
    def preset(self) -> None: ...
    def trigger_single(self) -> None: ...
    def fetch(self) -> None: ...
    def fetch_buffer(self) -> None: ...
    def setup_trace(self, frequency, trace_points, sample_period, trigger_level, trigger_delay, trigger_source) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RigolDP800Series(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def enable1(func) -> None: ...
    def enable2(func) -> None: ...
    def enable3(func) -> None: ...
    def voltage_setting1(func) -> None: ...
    def voltage_setting2(func) -> None: ...
    def voltage_setting3(func) -> None: ...
    def voltage1(func) -> None: ...
    def voltage2(func) -> None: ...
    def voltage3(func) -> None: ...
    def current1(func) -> None: ...
    def current2(func) -> None: ...
    def current3(func) -> None: ...
    def open(self) -> None: ...
    def __get_by_key__(self, command) -> None: ...
    def __set_by_key__(self, command, value) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzFSW26Base(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency_center(func) -> None: ...
    def frequency_span(func) -> None: ...
    def frequency_start(func) -> None: ...
    def frequency_stop(func) -> None: ...
    def resolution_bandwidth(func) -> None: ...
    def sweep_time(func) -> None: ...
    def sweep_time_window2(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    def reference_level(func) -> None: ...
    def reference_level_trace2(func) -> None: ...
    def reference_level_trace3(func) -> None: ...
    def reference_level_trace4(func) -> None: ...
    def reference_level_trace5(func) -> None: ...
    def reference_level_trace6(func) -> None: ...
    def amplitude_offset(func) -> None: ...
    def amplitude_offset_trace2(func) -> None: ...
    def amplitude_offset_trace3(func) -> None: ...
    def amplitude_offset_trace4(func) -> None: ...
    def amplitude_offset_trace5(func) -> None: ...
    def amplitude_offset_trace6(func) -> None: ...
    def output_trigger2_direction(func) -> None: ...
    def output_trigger3_direction(func) -> None: ...
    def output_trigger2_type(func) -> None: ...
    def output_trigger3_type(func) -> None: ...
    def input_preamplifier_enabled(func) -> None: ...
    def input_attenuation_auto(func) -> None: ...
    def input_attenuation(func) -> None: ...
    def channel_type(func) -> None: ...
    def format(func) -> None: ...
    def sweep_points(func) -> None: ...
    def display_update(func) -> None: ...
    def verify_channel_type(self) -> None: ...
    def open(self) -> None: ...
    def acquire_spectrogram(self, acquisition_time_sec) -> None: ...
    def close(self) -> None: ...
    def clear_status(self) -> None: ...
    def status_preset(self) -> None: ...
    def save_state(self, name, basedir=None) -> None: ...
    def load_state(self, name, basedir=None) -> None: ...
    def load_cache(self) -> None: ...
    def save_cache(self) -> None: ...
    def mkdir(self, path, recursive=True) -> None: ...
    def file_info(self, path) -> None: ...
    def remove_window(self, name) -> None: ...
    def trigger_single(self, wait=True, disable_continuous=True) -> None: ...
    def autolevel(self) -> None: ...
    def abort(self) -> None: ...
    def set_channel_type(self, type_=None) -> None: ...
    def channel_preset(self) -> None: ...
    def query_ieee_array(self, msg) -> None: ...
    def fetch_horizontal(self, window=None, trace=None) -> None: ...
    def fetch_trace(self, trace=None, horizontal=False, window=None) -> None: ...
    def fetch_timestamps(self, window=None, all=True, timeout=50000) -> None: ...
    def fetch_spectrogram(self, window=None, freqs='exact', timestamps='exact', timeout=None) -> None: ...
    def fetch_marker(self, marker, axis) -> None: ...
    def get_marker_enables(self) -> None: ...
    def get_marker_power(self, marker) -> None: ...
    def get_marker_position(self, marker) -> None: ...
    def set_marker_position(self, marker, position) -> None: ...
    def trigger_output_pulse(self, port) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n', default_window: str = '', default_trace: str = '') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzFSW26SpectrumAnalyzer(ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26Base):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency_center(func) -> None: ...
    def frequency_span(func) -> None: ...
    def frequency_start(func) -> None: ...
    def frequency_stop(func) -> None: ...
    def resolution_bandwidth(func) -> None: ...
    def sweep_time(func) -> None: ...
    def sweep_time_window2(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    def reference_level(func) -> None: ...
    def reference_level_trace2(func) -> None: ...
    def reference_level_trace3(func) -> None: ...
    def reference_level_trace4(func) -> None: ...
    def reference_level_trace5(func) -> None: ...
    def reference_level_trace6(func) -> None: ...
    def amplitude_offset(func) -> None: ...
    def amplitude_offset_trace2(func) -> None: ...
    def amplitude_offset_trace3(func) -> None: ...
    def amplitude_offset_trace4(func) -> None: ...
    def amplitude_offset_trace5(func) -> None: ...
    def amplitude_offset_trace6(func) -> None: ...
    def output_trigger2_direction(func) -> None: ...
    def output_trigger3_direction(func) -> None: ...
    def output_trigger2_type(func) -> None: ...
    def output_trigger3_type(func) -> None: ...
    def input_preamplifier_enabled(func) -> None: ...
    def input_attenuation_auto(func) -> None: ...
    def input_attenuation(func) -> None: ...
    def channel_type(func) -> None: ...
    def format(func) -> None: ...
    def sweep_points(func) -> None: ...
    def display_update(func) -> None: ...
    def get_marker_band_power(self, marker) -> None: ...
    def get_marker_band_span(self, marker) -> None: ...
    def get_marker_power_table(self) -> None: ...
    def fetch_marker_bpow(self, marker) -> None: ...
    def fetch_marker_bpow_span(self, marker) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n', default_window: str = '', default_trace: str = '') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzFSW26IQAnalyzer(ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26Base):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency_center(func) -> None: ...
    def frequency_span(func) -> None: ...
    def frequency_start(func) -> None: ...
    def frequency_stop(func) -> None: ...
    def resolution_bandwidth(func) -> None: ...
    def sweep_time(func) -> None: ...
    def sweep_time_window2(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    def reference_level(func) -> None: ...
    def reference_level_trace2(func) -> None: ...
    def reference_level_trace3(func) -> None: ...
    def reference_level_trace4(func) -> None: ...
    def reference_level_trace5(func) -> None: ...
    def reference_level_trace6(func) -> None: ...
    def amplitude_offset(func) -> None: ...
    def amplitude_offset_trace2(func) -> None: ...
    def amplitude_offset_trace3(func) -> None: ...
    def amplitude_offset_trace4(func) -> None: ...
    def amplitude_offset_trace5(func) -> None: ...
    def amplitude_offset_trace6(func) -> None: ...
    def output_trigger2_direction(func) -> None: ...
    def output_trigger3_direction(func) -> None: ...
    def output_trigger2_type(func) -> None: ...
    def output_trigger3_type(func) -> None: ...
    def input_preamplifier_enabled(func) -> None: ...
    def input_attenuation_auto(func) -> None: ...
    def input_attenuation(func) -> None: ...
    def channel_type(func) -> None: ...
    def format(func) -> None: ...
    def sweep_points(func) -> None: ...
    def display_update(func) -> None: ...
    def iq_simple_enabled(func) -> None: ...
    def iq_evaluation_enabled(func) -> None: ...
    def iq_mode(func) -> None: ...
    def iq_record_length(func) -> None: ...
    def iq_sample_rate(func) -> None: ...
    def iq_format(func) -> None: ...
    def iq_format_window2(func) -> None: ...
    def fetch_trace(self, horizontal=False, trace=None) -> None: ...
    def store_trace(self, path) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n', default_window: str = '', default_trace: str = '') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzFSW26LTEAnalyzer(ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26Base):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency_center(func) -> None: ...
    def frequency_span(func) -> None: ...
    def frequency_start(func) -> None: ...
    def frequency_stop(func) -> None: ...
    def resolution_bandwidth(func) -> None: ...
    def sweep_time(func) -> None: ...
    def sweep_time_window2(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    def reference_level(func) -> None: ...
    def reference_level_trace2(func) -> None: ...
    def reference_level_trace3(func) -> None: ...
    def reference_level_trace4(func) -> None: ...
    def reference_level_trace5(func) -> None: ...
    def reference_level_trace6(func) -> None: ...
    def amplitude_offset(func) -> None: ...
    def amplitude_offset_trace2(func) -> None: ...
    def amplitude_offset_trace3(func) -> None: ...
    def amplitude_offset_trace4(func) -> None: ...
    def amplitude_offset_trace5(func) -> None: ...
    def amplitude_offset_trace6(func) -> None: ...
    def output_trigger2_direction(func) -> None: ...
    def output_trigger3_direction(func) -> None: ...
    def output_trigger2_type(func) -> None: ...
    def output_trigger3_type(func) -> None: ...
    def input_preamplifier_enabled(func) -> None: ...
    def input_attenuation_auto(func) -> None: ...
    def input_attenuation(func) -> None: ...
    def channel_type(func) -> None: ...
    def format(func) -> None: ...
    def sweep_points(func) -> None: ...
    def display_update(func) -> None: ...
    @Float(min=0)
    def uplink_sample_rate(self) -> None: ...
    def uplink_sample_rate(func) -> None: ...
    @Float(min=0)
    def downlink_sample_rate(self) -> None: ...
    def downlink_sample_rate(func) -> None: ...
    def open(self) -> None: ...
    def fetch_power_vs_symbol_x_carrier(self, window, trace) -> None: ...
    def get_ascii_window_trace(self, window, trace) -> None: ...
    def get_binary_window_trace(self, window, trace) -> None: ...
    def get_allocation_summary(self, window) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n', default_window: str = '', default_trace: str = '') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzFSW26RealTime(ssmdevices.instruments.signal_analyzers.RohdeSchwarzFSW26Base):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency_center(func) -> None: ...
    def frequency_span(func) -> None: ...
    def frequency_start(func) -> None: ...
    def frequency_stop(func) -> None: ...
    def resolution_bandwidth(func) -> None: ...
    def sweep_time(func) -> None: ...
    def sweep_time_window2(func) -> None: ...
    def initiate_continuous(func) -> None: ...
    def reference_level(func) -> None: ...
    def reference_level_trace2(func) -> None: ...
    def reference_level_trace3(func) -> None: ...
    def reference_level_trace4(func) -> None: ...
    def reference_level_trace5(func) -> None: ...
    def reference_level_trace6(func) -> None: ...
    def amplitude_offset(func) -> None: ...
    def amplitude_offset_trace2(func) -> None: ...
    def amplitude_offset_trace3(func) -> None: ...
    def amplitude_offset_trace4(func) -> None: ...
    def amplitude_offset_trace5(func) -> None: ...
    def amplitude_offset_trace6(func) -> None: ...
    def output_trigger2_direction(func) -> None: ...
    def output_trigger3_direction(func) -> None: ...
    def output_trigger2_type(func) -> None: ...
    def output_trigger3_type(func) -> None: ...
    def input_preamplifier_enabled(func) -> None: ...
    def input_attenuation_auto(func) -> None: ...
    def input_attenuation(func) -> None: ...
    def channel_type(func) -> None: ...
    def format(func) -> None: ...
    def sweep_points(func) -> None: ...
    def display_update(func) -> None: ...
    def trigger_source(func) -> None: ...
    def trigger_post_time(func) -> None: ...
    def trigger_pre_time(func) -> None: ...
    def iq_fft_length(func) -> None: ...
    def iq_bandwidth(func) -> None: ...
    def iq_sample_rate(func) -> None: ...
    def iq_trigger_position(func) -> None: ...
    def sweep_dwell_auto(func) -> None: ...
    def sweep_dwell_time(func) -> None: ...
    def sweep_window_type(func) -> None: ...
    def store_spectrogram(self, path, window=2) -> None: ...
    def clear_spectrogram(self, window=2) -> None: ...
    def fetch_horizontal(self, window=2, trace=1) -> None: ...
    def set_detector_type(self, type_, window=None, trace=None) -> None: ...
    def get_detector_type(self, window=None, trace=None) -> None: ...
    @Int(min=781,max=100000)
    def spectrogram_depth(self, window=None) -> None: ...
    def spectrogram_depth(self, depth) -> None: ...
    def spectrogram_depth(func) -> None: ...
    @Float(help="'defined in dB relative to the reference level",max=0)
    def trigger_mask_threshold(self) -> None: ...
    def trigger_mask_threshold(self, thresholds) -> None: ...
    def trigger_mask_threshold(func) -> None: ...
    def set_frequency_mask(self, thresholds, frequency_offsets=None, kind='upper', window=None) -> None: ...
    def get_frequency_mask(self, kind='upper', window=None, first_threshold_only=False) -> None: ...
    def setup_spectrogram(self, center_frequency, analysis_bandwidth, reference_level, time_resolution, acquisition_time, input_attenuation=None, trigger_threshold=None, detector='SAMP', analysis_window=None, **kws) -> None: ...
    def acquire_spectrogram_sequence(self, loop_time=None, delay_time=0.1, timestamps='fast') -> None: ...
    def arm_spectrogram(self) -> None: ...
    def acquire_spectrogram(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n', default_window: str = '', default_trace: str = '') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class RohdeSchwarzSMW200A(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def frequency_center(func) -> None: ...
    def rf_output_power(func) -> None: ...
    def rf_output_enable(func) -> None: ...
    def save_state(self, FileName, num='4') -> None: ...
    def load_state(self, FileName, opc=False, num='4') -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\n') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class MiniCircuitsUSBSwitch(labbench.backends.DotNetDevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    @Int(min=1)
    def port(self) -> None: ...
    def port(self, value) -> None: ...
    def port(func) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class ETSLindgrenAzi2005(labbench.backends.VISADevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def identity(func) -> None: ...
    def options(func) -> None: ...
    @Dict(key='*STB',help=' VISA status byte reported by the instrument ',settable=False)
    def status_byte(self) -> None: ...
    def status_byte(func) -> None: ...
    def config(self, mode) -> None: ...
    def whereami(self) -> None: ...
    def wheredoigo(self) -> None: ...
    def set_speed(self, value) -> None: ...
    def set_limits(self, side, value) -> None: ...
    def set_position(self, value) -> None: ...
    def seek(self, value) -> None: ...
    def stop(self) -> None: ...
    def speed(func) -> None: ...
    def cwlimit(func) -> None: ...
    def cclimit(func) -> None: ...
    def define_position(func) -> None: ...
    def position(func) -> None: ...
    def __set_by_key__(self, command, value) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, read_termination: str = '\n', write_termination: str = '\r', timeout: float = 20, baud_rate: int = 9600, parity: bytes = b'N', stopbits: float = 1, xonxoff: bool = False, rtscts: bool = False, dsrdtr: bool = False) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

