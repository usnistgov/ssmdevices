import labbench as lb
from typing import Any

class KeysightU2000XSeries(lb.VISADevice):
    def __init__(
        self,
        resource: str = "str",
        read_termination: str = "str",
        write_termination: str = "str",
    ): ...
    TRIGGER_SOURCES: Any = ...
    initiate_continuous: Any = ...
    output_trigger: Any = ...
    trigger_source: Any = ...
    trigger_count: Any = ...
    measurement_rate: Any = ...
    sweep_aperture: Any = ...
    frequency: Any = ...
    def preset(self) -> None: ...
    def fetch(self): ...
    @classmethod
    def __imports__(cls) -> None: ...

class RohdeSchwarzNRPSeries(lb.VISADevice):
    def __init__(self, resource: str = "str", write_termination: str = "str"): ...
    FUNCTIONS: Any = ...
    TRIGGER_SOURCES: Any = ...
    frequency: Any = ...
    initiate_continuous: Any = ...
    def function(self, value: Any) -> None: ...
    def trigger_source(self): ...
    trigger_delay: Any = ...
    trigger_count: Any = ...
    trigger_holdoff: Any = ...
    trigger_level: Any = ...
    trace_points: Any = ...
    trace_realtime: Any = ...
    trace_time: Any = ...
    trace_offset_time: Any = ...
    trace_average_count: Any = ...
    trace_average_mode: Any = ...
    trace_average_enable: Any = ...
    average_count: Any = ...
    average_auto: Any = ...
    average_enable: Any = ...
    smoothing_enable: Any = ...
    read_termination: Any = ...
    def preset(self) -> None: ...
    def trigger_single(self) -> None: ...
    def fetch(self): ...
    def fetch_buffer(self): ...
    def setup_trace(
        self,
        frequency: Any,
        trace_points: Any,
        sample_period: Any,
        trigger_level: Any,
        trigger_delay: Any,
        trigger_source: Any,
    ) -> None: ...
    @classmethod
    def __imports__(cls) -> None: ...

class RohdeSchwarzNRP8s(RohdeSchwarzNRPSeries):
    def __init__(self, resource: str = "str", write_termination: str = "str"): ...
    frequency: Any = ...

class RohdeSchwarzNRP18s(RohdeSchwarzNRPSeries):
    def __init__(self, resource: str = "str", write_termination: str = "str"): ...
    frequency: Any = ...
