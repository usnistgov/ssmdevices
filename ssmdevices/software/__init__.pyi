from ssmdevices.software import *
import ssmdevices
import builtins

class IPerfClient(ssmdevices.software.network_profiling.IPerf):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def __imports__(self, *args, **kws) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, binary_path: str = '..\\ssmdevices\\lib\\iperf.exe', timeout: float = 6, arguments: list = ['-n', '-1', '-y', 'C'], arguments_min: int = 0, port: int = 5001, bind: str = None, tcp_window_size: int = None, buffer_size: int = None, interval: float = 0.25, bidirectional: bool = False, udp: bool = False, bit_rate: str = None, time: int = None) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class IPerf(labbench.backends.ShellBackend):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def fetch(self) -> None: ...
    def background(self, *extra_args, **flags) -> None: ...
    def start(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, binary_path: str = '..\\ssmdevices\\lib\\iperf.exe', timeout: float = 6, arguments: list = ['-n', '-1', '-y', 'C'], arguments_min: int = 0, port: int = 5001, bind: str = None, tcp_window_size: int = None, buffer_size: int = None, interval: float = 0.25, bidirectional: bool = False, udp: bool = False, bit_rate: str = None, time: int = None) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class IPerfOnAndroid(ssmdevices.software.network_profiling.IPerf):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def open(self) -> None: ...
    def start(self) -> None: ...
    def kill(self, wait_time=3) -> None: ...
    def read_stdout(self, n=0) -> None: ...
    def fetch(self) -> None: ...
    def wait_for_cell_data(self, timeout=60) -> None: ...
    def reboot(self, block=True) -> None: ...
    def wait(self, timeout=30) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, binary_path: str = '..\\ssmdevices\\lib\\adb.exe', timeout: float = 6, arguments: list = ['shell', '/data/local/tmp/iperf'], arguments_min: int = 0, port: int = 5001, bind: str = None, tcp_window_size: int = None, buffer_size: int = None, interval: float = 0.25, bidirectional: bool = False, udp: bool = False, bit_rate: str = None, time: int = None, remote_binary_path: str = '/data/local/tmp/iperf') -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class IPerfBoundPair(labbench.core.Device):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, sender: str = '', receiver: str = '', port_max: int = 6000) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def kill(self) -> None: ...
    def running(self) -> None: ...
    def fetch(self) -> None: ...
    def start(self) -> None: ...
    def acquire(self, duration) -> None: ...
    def __init_wrapped__(self, *args, **kws) -> None: ...
    pass

class ClosedLoopTCPBenchmark(ssmdevices.software.network_profiling.ClosedLoopBenchmark):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def _close_sockets(self, *sockets, bytes_=0) -> None: ...
    def _open_sockets(self, buffer_size) -> None: ...
    def _run(self, client_sock, server_sock, buffer_size, duration=None, count=None, end_event=None) -> None: ...
    def acquire(self, buffer_size, count=None, duration=None) -> None: ...
    def _make_dataframe(self, worker_data) -> None: ...
    def mss(self) -> None: ...
    def mtu(self) -> None: ...
    def wait_for_interfaces(self, timeout) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, server: str = '', client: str = '', receiver: str = '', port: int = 0, timeout: float = 2, tcp_nodelay: bool = True, sync_each: bool = False, delay: float = 0) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class Netsh(labbench.backends.ShellBackend):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def wait(self) -> None: ...
    def get_wlan_ssids(self, interface) -> None: ...
    def get_wlan_interfaces(self, name=None, param=None) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, binary_path: str = 'C:\\Windows\\System32\\netsh.exe', timeout: float = 5.0, arguments: list = ['wlan'], arguments_min: int = 0) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class WLANStatus(labbench.core.Device):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def open(self) -> None: ...
    def interface_connect(self) -> None: ...
    def interface_disconnect(self) -> None: ...
    def interface_reconnect(self) -> None: ...
    @Unicode(key='interface',help=' `True` if psutil reports that the interface is up ',settable=False)
    def state(self) -> None: ...
    def state(func) -> None: ...
    @Bool(help=' `True` if psutil reports that the interface is up ',settable=False)
    def isup(self) -> None: ...
    def isup(func) -> None: ...
    @Int(key='ssid',settable=False,allow_none=True)
    def transmit_rate_mbps(self) -> None: ...
    def transmit_rate_mbps(func) -> None: ...
    @Int(key='ssid',settable=False,allow_none=True,max=100)
    def signal(self) -> None: ...
    def signal(func) -> None: ...
    @Unicode(key='interface',settable=False)
    def description(self) -> None: ...
    def description(func) -> None: ...
    @Int(key='ssid',settable=False,allow_none=True)
    def channel(self) -> None: ...
    def channel(func) -> None: ...
    def refresh(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, ssid: str = '', timeout: float = 10) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class QXDM(labbench.backends.Win32ComDevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def open(self) -> None: ...
    def ue_model_number(func) -> None: ...
    def ue_mode(func) -> None: ...
    def ue_imei(func) -> None: ...
    def ue_esn(func) -> None: ...
    def ue_build_id(func) -> None: ...
    def __get_by_key__(self, trait) -> None: ...
    def close(self) -> None: ...
    def configure(self, config_path, min_acquisition_time=None) -> None: ...
    def save(self, path=None, saveNm=None) -> None: ...
    def start(self, wait=True) -> None: ...
    def _get_com_port(self) -> None: ...
    def _load_config(self, path) -> None: ...
    @Unicode(help='QXDM application version',settable=False,cache=True)
    def version(self) -> None: ...
    def version(func) -> None: ...
    def _get_server_state(self) -> None: ...
    def _get_item_count(self) -> None: ...
    def _set_com_port(self, com_port) -> None: ...
    def reconnect(self) -> None: ...
    def _clear(self, timeout=20) -> None: ...
    def _wait_for_stop(self) -> None: ...
    def _wait_for_start(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, com_object: str = 'QXDM.QXDMAutoApplication', cache_path: str = 'temp', connection_timeout: float = 2) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

