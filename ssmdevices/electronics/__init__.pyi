from ssmdevices.electronics import *
import ssmdevices
import builtins

class SwiftNavPiksi(labbench.backends.SerialLoggingDevice):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True, timeout: float = 2, write_termination: bytes = b'\n', baud_rate: int = 1000000, parity: bytes = b'N', stopbits: float = 1, xonxoff: bool = False, rtscts: bool = False, dsrdtr: bool = False, poll_rate: float = 0.1, data_format: bytes = b'', stop_timeout: float = 0.5, max_queue_size: int = 100000) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

class AcronameUSBHub2x4(labbench.core.Device):
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def data0_enabled(func) -> None: ...
    def data1_enabled(func) -> None: ...
    def data2_enabled(func) -> None: ...
    def data3_enabled(func) -> None: ...
    def power0_enabled(func) -> None: ...
    def power1_enabled(func) -> None: ...
    def power2_enabled(func) -> None: ...
    def power3_enabled(func) -> None: ...
    def __import__(self) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def __set_by_key__(self, command, value) -> None: ...
    def enable(self, data=True, power=True, channel='all') -> None: ...
    def __init__(self, resource: str = '', *, concurrency: bool = True) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

